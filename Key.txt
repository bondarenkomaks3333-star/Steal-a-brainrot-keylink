<!DOCTYPE html>
<html>
<head>
    <title>Steal BrainRot Keys</title>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            color: white;
        }
        .container {
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            max-width: 600px;
            margin: 0 auto;
        }
        button {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            border-radius: 25px;
            cursor: pointer;
            margin: 10px;
        }
        button:hover {
            background: #ff5252;
        }
        .key {
            background: rgba(255,255,255,0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            font-family: monospace;
            font-size: 18px;
        }
        .admin-panel {
            margin-top: 30px;
            padding: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
        }
        input {
            padding: 10px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
        }
        .key-item {
            background: rgba(255,255,255,0.1);
            padding: 10px;
            margin: 5px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîë Steel BrainRot Keys</h1>
        <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</p>
        
        <button onclick="generateKey()">üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</button>
        
        <div id="keyDisplay" class="key" style="display:none;">
            –í–∞—à –∫–ª—é—á: <span id="keyValue"></span>
        </div>

        <!-- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å -->
        <div class="admin-panel">
            <h3>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h3>
            <input type="password" id="adminPass" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞">
            <button onclick="loginAdmin()">–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</button>
            
            <div id="adminControls" style="display:none;">
                <h4>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏</h4>
                <button onclick="generateMultipleKeys()">üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 10 –∫–ª—é—á–µ–π</button>
                <button onclick="viewAllKeys()">üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏</button>
                <button onclick="updateKeyTxt()">üíæ –û–±–Ω–æ–≤–∏—Ç—å key.txt</button>
                <button onclick="clearAllKeys()">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏</button>
                <div id="keysList"></div>
            </div>
        </div>
    </div>

    <script>
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π
        let keys = JSON.parse(localStorage.getItem('brainrotKeys')) || [];
        const ADMIN_PASSWORD = "Arhon1212@@";

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞
        function generateRandomKey() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let key = 'SB';
            for (let i = 0; i < 12; i++) {
                key += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return key;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª—é—á–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        function maskKey(key) {
            if (key.length <= 4) return key;
            return key.substring(0, 2) + '*'.repeat(key.length - 4) + key.substring(key.length - 2);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
        function generateKey() {
            const key = generateRandomKey();
            keys.push({
                key: key,
                created: new Date().toLocaleString(),
                used: false
            });
            localStorage.setItem('brainrotKeys', JSON.stringify(keys));
            
            document.getElementById('keyValue').textContent = key;
            document.getElementById('keyDisplay').style.display = 'block';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º key.txt
            updateKeyTxt();
        }

        // –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        function loginAdmin() {
            const pass = document.getElementById('adminPass').value;
            if (pass === ADMIN_PASSWORD) {
                document.getElementById('adminControls').style.display = 'block';
                document.getElementById('adminPass').value = '';
                alert('‚úÖ –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!');
            } else {
                alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        }

        function generateMultipleKeys() {
            for (let i = 0; i < 10; i++) {
                const key = generateRandomKey();
                keys.push({
                    key: key,
                    created: new Date().toLocaleString(),
                    used: false
                });
            }
            localStorage.setItem('brainrotKeys', JSON.stringify(keys));
            updateKeyTxt();
            alert('‚úÖ 10 –∫–ª—é—á–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        }

        function viewAllKeys() {
            let keysList = '<h4>üìä –í—Å–µ –∫–ª—é—á–∏ (' + keys.length + '):</h4>';
            keys.forEach((keyObj, index) => {
                const status = keyObj.used ? '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';
                const maskedKey = maskKey(keyObj.key);
                keysList += `
                    <div class="key-item">
                        <strong>${maskedKey}</strong><br>
                        –°–æ–∑–¥–∞–Ω: ${keyObj.created}<br>
                        –°—Ç–∞—Ç—É—Å: ${status}<br>
                        <small>ID: ${index + 1}</small>
                    </div>
                `;
            });
            document.getElementById('keysList').innerHTML = keysList;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ key.txt (—Å–∏–º—É–ª—è—Ü–∏—è)
        function updateKeyTxt() {
            if (keys.length > 0) {
                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è key.txt
                const currentKey = keys[keys.length - 1].key;
                
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                // –î–ª—è GitHub Pages –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ key.txt
                document.getElementById('keysList').innerHTML = `
                    <div class="key-item">
                        <h4>üíæ –¢–µ–∫—É—â–∏–π –∫–ª—é—á –≤ key.txt:</h4>
                        <strong>${currentKey}</strong><br>
                        <small>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ñ–∞–π–ª key.txt –Ω–∞ GitHub</small>
                    </div>
                `;
                
                // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è key.txt
                const blob = new Blob([currentKey], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                
                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = 'key.txt';
                downloadLink.textContent = 'üì• –°–∫–∞—á–∞—Ç—å key.txt';
                downloadLink.style.display = 'block';
                downloadLink.style.margin = '10px';
                downloadLink.style.padding = '10px';
                downloadLink.style.background = 'rgba(255,255,255,0.2)';
                downloadLink.style.borderRadius = '5px';
                downloadLink.style.color = 'white';
                downloadLink.style.textDecoration = 'none';
                
                document.getElementById('keysList').appendChild(downloadLink);
            }
        }

        function clearAllKeys() {
            if (confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–ª—é—á–∏?')) {
                keys = [];
                localStorage.setItem('brainrotKeys', JSON.stringify(keys));
                document.getElementById('keysList').innerHTML = '<p>‚úÖ –í—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã!</p>';
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            if (keys.length > 0) {
                document.getElementById('keyDisplay').style.display = 'block';
                document.getElementById('keyValue').textContent = keys[keys.length - 1].key;
            }
        }
    </script>
</body>
</html
